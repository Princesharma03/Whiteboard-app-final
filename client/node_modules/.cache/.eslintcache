[{"/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/index.js":"1","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/App.js":"2","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/reportWebVitals.js":"3","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/components/Welcome/Welcome.js":"4","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/components/container/Container.jsx":"5","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/components/board/Board.jsx":"6"},{"size":541,"mtime":1651374545230,"results":"7","hashOfConfig":"8"},{"size":403,"mtime":1651376481860,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1651046745000,"results":"10","hashOfConfig":"8"},{"size":1310,"mtime":1651422300517,"results":"11","hashOfConfig":"8"},{"size":2221,"mtime":1651418865258,"results":"12","hashOfConfig":"8"},{"size":3908,"mtime":1651417811102,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bir4m3",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/index.js",[],[],"/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/App.js",["35"],[],"\nimport './App.css';\nimport Container from './components/container/Container';\nimport Welcome from \"./components/Welcome/Welcome\";\nimport {Routes,Route,Navigate} from 'react-router-dom'\n\nfunction App() {\n  return (\n    \n      <Routes>\n        <Route path=\"\" element={<Welcome/>}/>\n        <Route path=\"/whiteboard/:room\" element={<Container/>}/>\n       \n\n      </Routes>\n   \n  );\n}\n\nexport default App;\n","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/reportWebVitals.js",[],[],"/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/components/Welcome/Welcome.js",[],[],"/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/components/container/Container.jsx",["36"],[],"import React from 'react';\nimport Board from '../board/Board'\nimport { useParams } from \"react-router-dom\";\nimport { Clipboard2Plus } from \"react-bootstrap-icons\";\n\nimport { useState } from 'react';\nimport './style.css';\n// import io from 'socket.io-client';\n// const socket = io.connect(\"http://localhost:3000\");\n\n\nconst Container=()=>{\n    \n    const [color,setColor]=useState(\"#000000\");\n    const [size,setSize]=useState(\"5\");\n    const prams=useParams();\n    // socket.emit(\"canvas-data\",prams.room);\n\n    const changeColor=(event)=>{\n        setColor(event.target.value);\n    }\n    const changeSize=(event)=>{\n        setSize(event.target.value);\n    }\n    \n    const myFunction=() => {\n        navigator.clipboard.writeText(\"https://whiteboard-for-inno.herokuapp.com/whiteboard/\"+prams.room);\n    }\n\n\n\n\n\n\n    return(\n        <div className='container'>\n                           <div className='color-picker-container'>\n                               Select Brush Color : &nbsp;\n                               <input type=\"color\" value={color} onChange={changeColor} />\n                           </div>\n                           <div className='brushsize-container'>\n                               Select Brush size : &nbsp;\n                           <select value={size} onChange={setSize}> \n                               <option>5</option>\n                               <option>10</option>\n                               <option>15</option>\n                               <option>20</option>\n                               <option>25</option>\n                               <option>30</option>\n                           </select>\n                           </div>\n                           <div class=\"shareDiv\">\n                           <button className='sharebtn' onClick={myFunction}><Clipboard2Plus/></button>\n                           </div>\n\n\n                           {/* <input type='text' onChange={this.changeRoom.bind(this)}/> */}\n                           <div className='board-container'>\n                               <Board color={color} size={size} room={prams.room}></Board>\n                           </div>\n                       </div>\n\n    )\n    \n}\n\n\n\nexport default Container","/home/in528/Documents/whiteBoard-app/whiteboard-app/client/src/components/board/Board.jsx",["37","38"],[],"import React from 'react';\nimport io from 'socket.io-client';\nimport './style.css';\nimport { Download } from \"react-bootstrap-icons\";\n\nclass Board extends React.Component {\n \n    \n    socket = io.connect(\"https://limitless-oasis-67091.herokuapp.com\");\n    room;\n    timeout;\n    ctx;\n    isDrawing = false;\n    \n    constructor(props) {\n        super(props);\n      \n        this.socket.on(\"canvas-data\", function(data){\n\n            var root = this;\n            var interval = setInterval(function(){\n                if(root.isDrawing) return;\n                root.isDrawing = true;\n                clearInterval(interval);\n                var image = new Image();\n                var canvas = document.querySelector('#board');\n                var ctx = canvas.getContext('2d');\n                image.onload = function() {\n                    ctx.drawImage(image, 0, 0);\n\n                    root.isDrawing = false;\n                };\n                image.src = data;\n            }, 200)\n        })\n        \n    }\n\n    componentDidMount() {\n        //  console.log(this.props)\n        this.socket.emit(\"join-room\",this.props.room);\n        this.drawOnCanvas();\n    }\n    \n\n    componentWillReceiveProps(newProps) {\n        this.ctx.strokeStyle = newProps.color;\n        this.ctx.lineWidth = newProps.size;\n        this.room=newProps.room;\n    }\n    \n    drawOnCanvas() {\n        var canvas = document.querySelector('#board');\n        this.ctx = canvas.getContext('2d');\n        var ctx = this.ctx;\n\n        var sketch = document.querySelector('#sketch');\n        var sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n\n        var mouse = {x: 0, y: 0};\n        var last_mouse = {x: 0, y: 0};\n\n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n\n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n\n        \n        \n        /* Drawing on Paint App */\n        ctx.lineWidth = this.props.size;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = this.props.color;\n     \n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n\n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n        var rooms=this.props.room;\n        // console.log(this.props.room)\n        var root = this;\n        var onPaint = function() {\n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n              \n            if(root.timeout != undefined) clearTimeout(root.timeout);\n            root.timeout = setTimeout(function(){\n                var base64ImageData = canvas.toDataURL(\"image/png\");\n                console.log(rooms);\n                root.socket.emit(\"canvas-data\", base64ImageData,rooms);\n            }, 500)\n        };\n    }\n   \n    render() {\n        return (\n            <div class=\"sketch\" id=\"sketch\">\n                <a id=\"download\" download=\"whiteboard.png\">\n                <button type=\"button\" className='bydownbtn' onClick={()=>{var download = document.getElementById(\"download\");\n                 var image = document.getElementById(\"board\").toDataURL(\"image/png\")\n                 .replace(\"image/png\", \"image/octet-stream\");\n                 download.setAttribute(\"href\", image);}}><Download/></button>\n                </a>\n                <canvas className=\"board\" id=\"board\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Board",{"ruleId":"39","severity":1,"message":"40","line":5,"column":22,"nodeType":"41","messageId":"42","endLine":5,"endColumn":30},{"ruleId":"39","severity":1,"message":"43","line":22,"column":11,"nodeType":"41","messageId":"42","endLine":22,"endColumn":21},{"ruleId":"44","severity":1,"message":"45","line":99,"column":29,"nodeType":"46","messageId":"47","endLine":99,"endColumn":31},{"ruleId":"48","severity":1,"message":"49","line":111,"column":17,"nodeType":"50","endLine":111,"endColumn":60},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'changeSize' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]